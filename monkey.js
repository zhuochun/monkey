// Generated by CoffeeScript 1.8.0
var ClickBehaviour, Monkey, TypeBehaviour, utils;

utils = {
  randomInt: function(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  },
  nextInterval: function(interval, current) {
    if (current == null) {
      current = 0;
    }
    if (typeof interval === "function") {
      return interval(current);
    } else if (typeof interval === "number") {
      return interval + current;
    } else {
      return utils.randomInt.apply(utils, interval) + current;
    }
  }
};

Monkey = (function() {
  function Monkey(options) {
    if (options == null) {
      options = {};
    }
    this.actions = [];
    this.history = [];
    this.round = 0;
    this.cycles = options.cycles || 10;
    this.initRegion(options.element);
  }

  Monkey.prototype.behaviour = function(action, interval) {
    var next;
    if (!interval) {
      interval = 1;
    }
    next = utils.nextInterval(interval);
    this.actions.push({
      run: action,
      interval: interval,
      next: next
    });
    return this;
  };

  Monkey.prototype.run = function() {
    var round;
    if (this.timeId) {
      return;
    }
    round = 0;
    return this.timeId = setInterval((function(_this) {
      return function() {
        if (round++ >= _this.cycles) {
          return _this.stop();
        } else {
          return _this.doAction(round);
        }
      };
    })(this), 50);
  };

  Monkey.prototype.pause = function() {};

  Monkey.prototype.stop = function() {
    if (this.timeId) {
      return clearTimeout(this.timeId);
    }
  };

  Monkey.prototype.reRun = function(startIdx, endIdx) {
    if (!history.length) {
      return;
    }
    if (startIdx && endIdx) {

    } else {

    }
  };

  Monkey.prototype.doAction = function(round) {
    var action, pos, _i, _len, _ref, _results;
    pos = {
      x: utils.randomInt.apply(utils, this.xRange),
      y: utils.randomInt.apply(utils, this.yRange)
    };
    this.history.push(pos);
    console.log("Round " + round + " -> x: " + pos.x + ", y: " + pos.y);
    _ref = this.actions;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      action = _ref[_i];
      if (action.next === round) {
        action.run(pos);
        _results.push(action.next = utils.nextInterval(action.interval, round));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Monkey.prototype.initRegion = function(elem) {
    var bottom, left, right, top, _ref;
    if (elem) {
      _ref = elem.getBoundingClientRect(), top = _ref.top, bottom = _ref.bottom, left = _ref.left, right = _ref.right;
      this.xRange = [left | 0, right | 0];
      return this.yRange = [top | 0, bottom | 0];
    } else {
      this.xRange = [1, document.documentElement.clientWidth];
      return this.yRange = [1, document.documentElement.clientHeight];
    }
  };

  return Monkey;

})();

ClickBehaviour = (function() {
  function ClickBehaviour() {
    this.clickableTags = ['a', 'button', 'link', 'input'];
  }

  ClickBehaviour.prototype.getHandler = function() {
    return this.handler.bind(this);
  };

  ClickBehaviour.prototype.handler = function(_arg) {
    var elem, x, y;
    x = _arg.x, y = _arg.y;
    elem = document.elementFromPoint(x, y);
    if (elem && this.isClickable(elem)) {
      console.log("Click on " + elem.innerHTML);
      return this.clickOn(elem);
    }
  };

  ClickBehaviour.prototype.clickOn = function(elem) {
    var ev;
    ev = new MouseEvent('click', {
      'view': window,
      'bubbles': true,
      'cancelable': true
    });
    return elem.dispatchEvent(ev);
  };

  ClickBehaviour.prototype.isClickable = function(elem) {
    var etag, tag, _i, _len, _ref;
    etag = a.tagName.toLowerCase();
    _ref = this.clickableTags;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tag = _ref[_i];
      if (etag === tag) {
        return true;
      }
    }
    return false;
  };

  return ClickBehaviour;

})();

TypeBehaviour = (function() {
  function TypeBehaviour() {
    this.chars = "abcdefghijklmnopqrstuvwxyz01234567890";
  }

  TypeBehaviour.prototype.getHandler = function() {
    return this.handler.bind(this);
  };

  TypeBehaviour.prototype.handler = function() {
    var elems;
    elems = document.querySelectorAll("input,textarea");
    if (elems.length === 0) {
      return;
    }
    return this.typeIn(elems[utils.randomInt(0, elems.length)]);
  };

  TypeBehaviour.prototype.typeIn = function(elem) {
    var nums, _results;
    nums = utils.randomInt(1, 5);
    _results = [];
    while (nums -= 1) {
      _results.push(elem.value += this.chars[utils.randomInt(0, this.chars.length)]);
    }
    return _results;
  };

  return TypeBehaviour;

})();

//# sourceMappingURL=monkey.js.map
